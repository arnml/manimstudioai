name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Test backend
      run: |
        cd backend
        python -m pytest tests/ || echo "No tests found, skipping"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Test frontend
      run: |
        cd frontend
        npm run lint || echo "No lint script found"
        npm test || echo "No tests found, skipping"

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Configure Docker to use gcloud as a credential helper'
      run: |
        gcloud auth configure-docker

    - name: Build and push manim-worker
      run: |
        docker build -t gcr.io/$PROJECT_ID/manim-studio-worker:$GITHUB_SHA ./manim-worker
        docker push gcr.io/$PROJECT_ID/manim-studio-worker:$GITHUB_SHA

    - name: Deploy manim-worker to Cloud Run
      run: |
        sed "s/PROJECT_ID/$PROJECT_ID/g" manim-worker-cloudrun.yaml | \
        sed "s/:latest/:$GITHUB_SHA/g" > manim-worker-deploy.yaml
        gcloud run services replace manim-worker-deploy.yaml --region=$REGION

    - name: Get manim-worker URL
      id: worker-url
      run: |
        WORKER_URL=$(gcloud run services describe manim-studio-worker --region=$REGION --format="value(status.url)")
        echo "url=$WORKER_URL" >> $GITHUB_OUTPUT

    - name: Build and push backend
      run: |
        docker build -t gcr.io/$PROJECT_ID/manim-studio-backend:$GITHUB_SHA ./backend
        docker push gcr.io/$PROJECT_ID/manim-studio-backend:$GITHUB_SHA

    - name: Deploy backend to Cloud Run
      run: |
        sed "s/PROJECT_ID/$PROJECT_ID/g" backend-cloudrun.yaml | \
        sed "s/:latest/:$GITHUB_SHA/g" | \
        sed "s|https://manim-studio-worker-SERVICE_HASH-uc.a.run.app|${{ steps.worker-url.outputs.url }}|g" > backend-deploy.yaml
        gcloud run services replace backend-deploy.yaml --region=$REGION

    - name: Get backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(gcloud run services describe manim-studio-backend --region=$REGION --format="value(status.url)")
        echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Build and push frontend
      run: |
        # Update environment variables for build
        echo "VITE_BACKEND_URL=${{ steps.backend-url.outputs.url }}" >> frontend/.env.production
        docker build -t gcr.io/$PROJECT_ID/manim-studio-frontend:$GITHUB_SHA ./frontend
        docker push gcr.io/$PROJECT_ID/manim-studio-frontend:$GITHUB_SHA

    - name: Deploy frontend to Cloud Run
      run: |
        sed "s/PROJECT_ID/$PROJECT_ID/g" frontend-cloudrun.yaml | \
        sed "s/:latest/:$GITHUB_SHA/g" | \
        sed "s|https://manim-studio-backend-SERVICE_HASH-uc.a.run.app|${{ steps.backend-url.outputs.url }}|g" > frontend-deploy.yaml
        gcloud run services replace frontend-deploy.yaml --region=$REGION

    - name: Get frontend URL
      id: frontend-url
      run: |
        FRONTEND_URL=$(gcloud run services describe manim-studio-frontend --region=$REGION --format="value(status.url)")
        echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Deployment summary
      run: |
        echo "ðŸš€ Deployment completed successfully!"
        echo "Frontend: ${{ steps.frontend-url.outputs.url }}"
        echo "Backend: ${{ steps.backend-url.outputs.url }}"
        echo "Worker: ${{ steps.worker-url.outputs.url }}"

    - name: Cleanup temporary files
      run: |
        rm -f *-deploy.yaml frontend/.env.production